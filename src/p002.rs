#[allow(unused_imports)]
use test::Bencher;
use utils::fibonacci;

/// Problem 2: Even Fibonacci numbers
///
/// Each new term in the Fibonacci sequence is generated by adding the
/// previous two terms.  By starting with 1 and 2, the first 10 terms will be:
///
/// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
///
/// By considering the terms in the Fibonacci sequence whose values do not
/// exceed four million, find the sum of the even-valued terms.

fn print_answer(limit: u32, sum: u32) {
    println!(
        "p002: The sum of all even numbers in the Fibonacci sequence until {:?} is: {}",
        limit, sum
    )
}

pub fn solve_while(limit: u32) {
    let mut sum = 0;
    let mut iterator = fibonacci::fibonacci();
    let mut current = iterator.next();
    while current.unwrap() < limit {
        sum += if current.unwrap() % 2 == 0 {
            current.unwrap()
        } else {
            0
        };
        current = iterator.next();
    }
    print_answer(limit, sum)
}

pub fn solve_for(limit: u32) {
    let mut sum = 0;
    for current in fibonacci::fibonacci() {
        if current > limit {
            break;
        }
        sum += if current % 2 == 0 { current } else { 0 }
    }
    print_answer(limit, sum)
}

pub fn solve_takewhile(limit: u32) {
    let sum = fibonacci::fibonacci()
        .take_while(|x| x < &limit)
        .fold(0, |sum, x| if x % 2 == 0 { sum + x } else { sum });
    print_answer(limit, sum)
}

pub fn solve_takewhile_filter(limit: u32) {
    let sum = fibonacci::fibonacci()
        .take_while(|x| x < &limit)
        .filter(|&x| x % 2 == 0)
        .fold(0, |sum, x| sum + x);
    print_answer(limit, sum)
}

pub fn solve_takewhile_filter_mutable(limit: u32) {
    let mut sum = 0;
    for i in fibonacci::fibonacci()
        .take_while(|x| x < &limit)
        .filter(|&x| x % 2 == 0)
    {
        sum += i
    }
    print_answer(limit, sum)
}

#[bench]
fn bench_for_sum(b: &mut Bencher) {
    b.iter(|| {
        solve_for(40000000);
    });
}

#[bench]
fn bench_while_sum(b: &mut Bencher) {
    b.iter(|| {
        solve_while(40000000);
    });
}

#[bench]
fn bench_takewhile_sum(b: &mut Bencher) {
    b.iter(|| {
        solve_takewhile(40000000);
    });
}

#[bench]
fn bench_takewhile_filter_sum(b: &mut Bencher) {
    b.iter(|| {
        solve_takewhile_filter(40000000);
    });
}

#[bench]
fn bench_takewhile_filter_mutable_sum(b: &mut Bencher) {
    b.iter(|| {
        solve_takewhile_filter_mutable(40000000);
    });
}
